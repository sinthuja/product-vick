@App:name('tracer-app')
@App:description("VICK Tracer Siddhi App which stores the spans accordingly from Zipkin format")

@source(type='tracing-receiver', @map(type='keyvalue', fail.on.missing.attribute='false'))
define stream ZipkinStreamIn (traceId string, id string, parentId string, name string, serviceName string,
                              kind string, timestamp long, duration long, tags string);

@Store(type='rdbms', datasource='Message_Tracing_DB', field.length="tags:8000,baggageItems:8000")
@PrimaryKey('TRACEID', 'spanId')
define table SpanTable (serviceName string, operationName string, spanId string, TRACEID string, parentId string,
                        tags string, baggageItems string, startTime long, endTime long, duration long,
                        spanReferences string, kind string, timestamp string);

define function getUniqueSpanId[javascript] return string {
    var id = data[0];
    var kind = data[1];
    if (id) {
        var postFix;
        switch (kind) {
            case 'CLIENT':
                postFix = '-c';
                break;
            case 'SERVER':
                postFix = '-s';
                break;
            default:
                postFix = '';
        }
        id = id + postFix;
    }
    return id;
};

-- *
-- * Delay client kind spans to ensure that server kind spans are already in DB
-- *
from ZipkinStreamIn[kind == 'SERVER']#window.time(3 sec)
insert expired events into ZipkinStream;

from ZipkinStreamIn[kind != 'SERVER']
insert into ZipkinStream;

from ZipkinStream
select
    traceId as TRACEID,
    getUniqueSpanId(id, kind) as id,
    parentId,
    name,
    serviceName,
    kind,
    timestamp,
    duration,
    tags
insert into UniqueSpanIdZipkinStream;

-- *
-- * Start of Queries for New Span's parent is in the SpanTable
-- *
from UniqueSpanIdZipkinStream#rdbms:query('Message_Tracing_DB', str:concat("SELECT ANY_VALUE(spanId) AS parentUniqueSpanId, ANY_VALUE(kind) AS parentKind, COUNT(spanId) AS rowCount FROM SpanTable WHERE TRACEID='", TRACEID, "' AND spanId LIKE '", parentId, "-_'"), 'parentUniqueSpanId string, parentKind string, rowCount int')
select
    TRACEID,
    id,
    ifThenElse(rowCount == 0, parentId, ifThenElse(rowCount == 1, parentUniqueSpanId, ifThenElse(parentId is null, "", getUniqueSpanId(parentId, 'SERVER')))) as parentId,
    name,
    serviceName,
    kind,
    timestamp,
    duration,
    tags
insert into SpanTablePrepStream;
-- * End of Queries for New Span's parent is in the SpanTable

-- *
-- * Start of Queries for New Span's Child is in the SpanTable
-- *
from UniqueSpanIdZipkinStream
select
    id,
    TRACEID,
    str:concat(str:substr(id, 0, 16), '-c') as parentClientSpanId,
    str:substr(id, 0, 16) as originalSpanId
update SpanTable
    set SpanTable.parentId = id
    on SpanTable.TRACEID == TRACEID and (SpanTable.parentId == parentClientSpanId or SpanTable.parentId == originalSpanId);
-- * End of Queries for New Span's Child is in the SpanTable

-- *
-- * Start of Queries for New Span's Sibling is in the SpanTable
-- *
from UniqueSpanIdZipkinStream[kind == 'SERVER']#rdbms:query('Message_Tracing_DB', str:concat("SELECT spanId AS parentUniqueSpanId FROM SpanTable WHERE TRACEID='", TRACEID, "' AND spanId='", str:substr(id, 0, 16), "-c'"), 'parentUniqueSpanId string')
select
    TRACEID,
    id,
    parentUniqueSpanId as parentId,
    name,
    serviceName,
    kind,
    timestamp,
    duration,
    tags
insert into SpanTablePrepStream;

from UniqueSpanIdZipkinStream[kind == 'CLIENT']
select
    id,
    TRACEID,
    str:concat(str:substr(id, 0, 16), "-s'") as siblingSpanId
update SpanTable
    set SpanTable.parentId = id
    on SpanTable.TRACEID == TRACEID and SpanTable.spanId == siblingSpanId;
-- * End of Queries for New Span's Sibling is in the SpanTable

from SpanTablePrepStream
select
    serviceName,
    name as operationName,
    id as spanId,
    TRACEID,
    parentId,
    tags,
    "[]" as baggageItems,
    timestamp as startTime,
    timestamp + duration as endTime,
    duration as duration,
    "" as spanReferences,
    kind,
    time:currentTime() as timestamp
update or insert into SpanTable
    on SpanTable.TRACEID == TRACEID and SpanTable.spanId == spanId;
