@App:name("istio-telemetry-app")
@App:description("This receives the attributes generally received by the Istio Mixer")

@source(type="telemetry-receiver", @map(type="keyvalue", fail.on.missing.attribute="false",
        @attributes(sourceUID="source.uid", sourceIP="source.ip", sourceLabels="source.labels",
                    sourceName="source.name", sourceNamespace="source.namespace", sourcePrincipal="source.principal",
                    sourceOwner="source.owner", sourceWorkloadUID="source.workload.uid",
                    sourceWorkloadName="source.workload.name", sourceWorkloadNamespace="source.workload.namespace",
                    destinationUID="destination.uid", destinationIP="destination.ip",
                    destinationPort="destination.port", destinationLabels="destination.labels",
                    destinationName="destination.name", destinationNamespace="destination.namespace",
                    destinationPrincipal="destination.principal", destinationOwner="destination.owner",
                    destinationWorkloadUID="destination.workload.uid",
                    destinationWorkloadName="destination.workload.name",
                    destinationWorkloadNamespace="destination.workload.namespace",
                    destinationContainerName="destination.container.name",
                    destinationContainerImage="destination.container.image",
                    destinationServiceHost="destination.service.host",
                    destinationServiceUID="destination.service.uid",
                    destinationServiceName="destination.service.name",
                    destinationServiceNamespace="destination.service.namespace",
                    requestHeaders="request.headers",
                    requestID="request.id", requestPath="request.path", requestHost="request.host",
                    requestMethod="request.method", requestReason="request.reason",
                    requestReferer="request.referer" , requestScheme="request.scheme", requestSize="request.size",
                    requestTotalSize="request.total_size", requestTimeSec="request.time_sec",
                    requestTimeNanoSec="request.time_nanosec", requestUserAgent="request.useragent",
                    responseHeaders="response.headers", responseSize="response.size",
                    responseTotalSize="response.total_size", responseTimeSec="response.time_sec",
                    responseTimeNanoSec="response.time_nanosec", responseDurationSec="response.duration_sec",
                    responseDurationNanoSec="response.duration_nanosec", responseCode="response.code",
                    responseGRPCStatus="response.grpc_status", responseGRPCMessage="response.grpc_message",
                    connectionID="connection.id", connectionEvent="connection.event",
                    connectionReceivedBytes="connection.received.bytes",
                    connectionReceivedBytesTotal="connection.received.bytes_total",
                    connectionSentBytes="connection.sent.bytes",
                    connectionSentBytesTotal="connection.sent.bytes_total",
                    connectionDurationSec="connection.duration_sec",
                    connectionDurationNanoSec="connection.duration_nanosec", connectionMTLS="connection.mtls",
                    connectionRequestedServerName="connection.requested_server_name",
                    contextProtocol="context.protocol", contextTimeSec="context.time_sec",
                    contextTimeNanoSec="context.time_nanosec", contextReporterKind="context.reporter.kind",
                    contextReporterUID="context.reporter.uid", apiService="api.service", apiVersion="api.version",
                    apiOperation="api.operation", apiProtocol="api.protocol",
                    requestAuthPrincipal="request.auth.principal", requestAuthAudiences="request.auth.audiences",
                    requestAuthPresenter="request.auth.presenter", requestAuthClaims="request.auth.claims",
                    requestAPIKey="request.api_key", checkErrorCode="check.error_code",
                    checkErrorMessage="check.error_message", checkCacheHit="check.cache_hit",
                    quotaCacheHit="quota.cache_hit", contextReporterLocal="context.reporter.local")))
define stream TelemetryStream(sourceUID string, sourceIP string, sourceLabels string, sourceName string,
                              sourceNamespace string, sourcePrincipal string, sourceOwner string,
                              sourceWorkloadUID string, sourceWorkloadName string,
                              sourceWorkloadNamespace string, destinationUID string, destinationIP string,
                              destinationPort long, destinationLabels string, destinationName string,
                              destinationNamespace string, destinationPrincipal string, destinationOwner string,
                              destinationWorkloadUID string, destinationWorkloadName string,
                              destinationWorkloadNamespace string, destinationContainerName string,
                              destinationContainerImage string, destinationServiceHost string,
                              destinationServiceUID string, destinationServiceName string,
                              destinationServiceNamespace string, requestHeaders string, requestID string,
                              requestPath string, requestHost string, requestMethod string, requestReason string,
                              requestReferer string, requestScheme string, requestSize long,
                              requestTotalSize long, requestTimeSec long, requestTimeNanoSec int,
                              requestUserAgent string, responseHeaders string, responseSize long,
                              responseTotalSize long, responseTimeSec long, responseTimeNanoSec int,
                              responseDurationSec long, responseDurationNanoSec int, responseCode long,
                              responseGRPCStatus string, responseGRPCMessage string, connectionID string,
                              connectionEvent string, connectionReceivedBytes long,
                              connectionReceivedBytesTotal long, connectionSentBytes long,
                              connectionSentBytesTotal long, connectionDurationSec long,
                              connectionDurationNanoSec int, connectionMTLS bool,
                              connectionRequestedServerName string, contextProtocol string, contextTimeSec long,
                              contextTimeNanoSec int, contextReporterKind string, contextReporterUID string,
                              apiService string, apiVersion string, apiOperation string, apiProtocol string,
                              requestAuthPrincipal string, requestAuthAudiences string,
                              requestAuthPresenter string, requestAuthClaims string, requestAPIKey string,
                              checkErrorCode long, checkErrorMessage string, checkCacheHit bool,
                              quotaCacheHit bool, contextReporterLocal bool);

@sink(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryInMemorySink(sourceNamespace string, sourceCell string, sourceVICKService string,
                                    sourcePod string, destinationNamespace string, destinationCell string,
                                    destinationVICKService string, destinationPod string, contextReporterKind string,
                                    requestHeadersMap object, requestPath string, requestMethod string,
                                    requestSizeBytes long, responseCode long, responseDurationNanoSec int,
                                    responseSizeBytes long);

define function extractFromUID[javascript] return string {
    var uid = data[0];
    var index = data[1];    // 1: pod, 2: cell, 3: vickService, 4: namespace

    var matches = /^(([a-z0-9-]+)--([a-z0-9-]+)-deployment-[a-z0-9]+-[a-z0-9]+)\.([a-z0-9-]+)$/.exec(uid);

    var extractedData = "";
    if (matches) {
        extractedData = matches[index];
    } else if (uid === "Synapse-PT-HttpComponents-NIO") {
        if (index === 3) {
            extractedData = "global-gateway";
        }
    }
    return extractedData;
};

from TelemetryStream[(not sourceUID is null) and (not destinationUID is null)]
select
    str:replaceFirst(sourceUID, "^kubernetes://", "") as sourceUID,
    str:replaceFirst(destinationUID, "^kubernetes://", "") as destinationUID,
    contextReporterKind,
    ifThenElse(requestHeaders is null, map:create(), map:createFromJSON(requestHeaders)) as requestHeadersMap,
    requestPath,
    requestMethod,
    requestTotalSize,
    responseCode,
    responseDurationNanoSec,
    responseTotalSize
insert into PreprocessedTelemetryStream;

from PreprocessedTelemetryStream
select
    extractFromUID(sourceUID, 4) as sourceNamespace,
    extractFromUID(sourceUID, 2) as sourceCell,
    extractFromUID(sourceUID, 3) as sourceVICKService,
    extractFromUID(sourceUID, 1) as sourcePod,
    extractFromUID(destinationUID, 4) as destinationNamespace,
    extractFromUID(destinationUID, 2) as destinationCell,
    extractFromUID(destinationUID, 3) as destinationVICKService,
    extractFromUID(destinationUID, 1) as destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestTotalSize as requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseTotalSize as responseSizeBytes
insert into ExtractedTelemetryStream;

-- Storing the required attributes in a in memory sink (To be accessed from other siddhi apps)
-- When updating the used attributes from the received attributes the stream definitions needs to be updated in all
-- the places where the in memory source is used

from ExtractedTelemetryStream
select
    sourceNamespace,
    sourceCell,
    ifThenElse(sourceVICKService == "gateway", str:concat(sourceCell, "-cell-gateway"),
        sourceVICKService) as sourceVICKService,
    sourcePod,
    destinationNamespace,
    destinationCell,
    ifThenElse(destinationVICKService == "gateway", str:concat(destinationCell, "-cell-gateway"),
        destinationVICKService) as destinationVICKService,
    destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into TelemetryInMemorySink;
