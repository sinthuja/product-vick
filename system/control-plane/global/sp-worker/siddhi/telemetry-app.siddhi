@App:name("telemetry-app")
@App:description("VICK Telemetry app for processing and storing http requests")

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn(sourceNamespace string, sourceCell string, sourceVICKService string,
                                sourcePod string, destinationNamespace string, destinationCell string,
                                destinationVICKService string, destinationPod string, contextReporterKind string,
                                requestHeadersMap object, requestPath string, requestMethod string,
                                requestSizeBytes long, responseCode long, responseDurationNanoSec int,
                                responseSizeBytes long);

define stream ProcessedRequestsStream(sourceNamespace string, sourceCell string, sourceVICKService string,
                                      destinationNamespace string, destinationCell string,
                                      destinationVICKService string, requestPath string, requestMethod string,
                                      httpResponseGroup string, responseTimeSec double, responseSizeBytes long);

@store(type="rdbms", datasource="VICK_OBSERVABILITY_DB")
@purge(enable="false")
define aggregation RequestAggregation from ProcessedRequestsStream
select
    sourceNamespace,
    sourceCell,
    sourceVICKService,
    destinationNamespace,
    destinationCell,
    destinationVICKService,
    requestPath,
    requestMethod,
    httpResponseGroup,
    avg(responseTimeSec) as avgResponseTimeSec,
    avg(responseSizeBytes) as avgResponseSizeBytes,
    count() as requestCount
group by
    sourceNamespace, sourceCell, sourceVICKService,
    destinationNamespace, destinationCell, destinationVICKService,
    requestPath, requestMethod, httpResponseGroup
aggregate every sec...year;

--
-- Storing the data received from Istio Telemetry
--

from TelemetryStreamIn
select
    sourceNamespace,
    sourceCell,
    sourceVICKService,
    destinationNamespace,
    destinationCell,
    destinationVICKService,
    contextReporterKind,
    cast(map:get(requestHeadersMap, "x-request-id"), "string") as requestId,
    requestPath,
    requestMethod,
    str:concat(convert(cast(responseCode, "int") / 100, "string"), "xx") as httpResponseGroup,
    convert(responseDurationNanoSec, "double") / 1000000 as responseTimeSec,
    ifThenElse(responseSizeBytes is null, 0L, responseSizeBytes) as responseSizeBytes
insert into ProcessedTelemetryStream;

from every(e1=ProcessedTelemetryStream) ->
    not ProcessedTelemetryStream[e1.requestId == e2.requestId] for 1 minute
    or e2=ProcessedTelemetryStream[e1.requestId == e2.requestId] within 1 minute
select
    e1.sourceNamespace,
    e1.sourceCell,
    e1.sourceVICKService,
    e1.destinationNamespace,
    e1.destinationCell,
    e1.destinationVICKService,
    e1.requestPath,
    e1.requestMethod,
    e1.httpResponseGroup,
    e1.responseTimeSec,
    ifThenElse(e1.contextReporterKind == "outbound", e1.responseSizeBytes, e2.responseSizeBytes) as responseSizeBytes
insert into ProcessedRequestsStream;
